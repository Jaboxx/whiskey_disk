 - [BUG] still a problem with project name when not specified in config file and not specified in ENV['to']; try deploying with current code -- will get a problem mapping the dummy project name when looking up the final config data.  Review this code.

 - update README
 - cut the next gem release

---

 - focus on the ease of deploying non-Ruby applications, as well as large numbers of applications on a server, without running from inside application checkouts (i.e., headaches with rakefiles, lib includes, etc.) 
 
   a starter wd script might look like:
 
   #!/bin/sh
   rake -f ~/path/to/some/Rakefile -rubygems -r 'tasks/deploy' "$@"
   
 - document the various ways we'd handle deployments; various config repo patterns of usage

 - would be nice to have the ability to say if a project is out of date (meaning that, based upon this config file, either the checked out project repo or the checked out config repo is older than the upstream) so we can do some sort of automated / conditional deployments.  We could implement this as a config file option (check for out of date before deploying), but questions about how to "force" if necessary.  Could also be done as a flag.
 
 - do git-deploy style change detection:  get the current branch ref, then do the fetch/reset, get the current branch ref; find the differences, make them available to the rake task(s)
   - some sort of simple API to access the detected changes
     require 'whiskey_disk/rake'
   
     namespace :deploy do
       task :post_deploy do 
         if changed_in?('db/migrate') or changed?('config/database.yml')
           Rake::Task['db:migrate'].invoke
         end
         # etc. ...
       end
     end



---

 - [Q] what about per-environment rake tasks, do we just store these in the config repo?  does this work?
 
 - [Q] ditto, maintenance pages(?) (i.e., a pre-deploy hook)

 - [Q] do we want a mechanism to manage the config repo?  (add a repo, add a project, add an environment, put a file into the config repo for an environment?)

 - [Q] do we need actual support for "rollbacks"?

 - [Q] do we want to support multi-system deployments (i.e., deploy and rollback on 4 simultaneous app servers, other bullshit running on the db server, etc.)?  If we get into this, we have the original :role problem that cap faced -- i.e., we only want to run the database operations on certain hosts.
